package com.att.gfp.data.ipagPreprocess.preprocess;


#list any import classes here.
import com.att.gfp.data.ipagPreprocess.preprocess.EnrichedPreprocessAlarm;
import com.att.gfp.data.ipagPreprocess.preprocess.CDCAlarm;
import com.att.gfp.data.ipag.topoModel.IpagTopoAccess;
import com.hp.uca.expert.x733alarm.PerceivedSeverity;
import com.hp.uca.expert.scenario.Scenario;
import com.hp.uca.expert.scenario.ScenarioStatus;
import com.hp.uca.expert.flag.SynchronizationFlag;
import com.hp.uca.expert.flag.Flag;
import com.hp.uca.common.trace.LogHelper;
import com.att.gfp.data.ipagAlarm.AlarmState;
import com.att.gfp.data.util.service_util; 
import com.att.gfp.data.util.PurgeIntervalHelper; 
import com.att.gfp.helper.GFPFields;
import java.util.ArrayList;
import java.util.List;
import com.hp.uca.expert.alarm.Alarm;   
import com.att.gfp.data.util.PreprocessHelper;
 
#declare any global variables here
global Scenario theScenario;



rule "First Alarm => Insert Flag Object to start a Time Window"
no-loop
when
    alarm : EnrichedPreprocessAlarm(this.getVar.getBoolean("PurgingOnGoing") != true)
then
   PurgeIntervalHelper.startPurgePeriod(theScenario, alarm); 
end
	
	
rule "CDC Alarms Bulk delete"                
      when    
          cdcAlarm : CDCAlarm( operation matches "delete")
                alarms : ArrayList( size >= 1 )    
		from collect( EnrichedPreprocessAlarm( ((getCustomFieldValue("cdc-subscription-type") == "L2-7450-IPAG") &&       
					(originatingManagedEntity matches "PPORT .*"||
					originatingManagedEntity matches "CARD .*" ||         
					originatingManagedEntity matches "SLOT .*")) ||
					 ((getCustomFieldValue("cdc-subscription-type") == "VLXP") &&       
					(originatingManagedEntity matches "EVC .*"))))                        
then  
               // then you process the alarms like below or loop over the list
               for(Alarm alarm : (ArrayList<Alarm>)alarms) {            
                              alarm.setCustomFieldValue("cdc-subscription-type", null); 
                              alarm.setCustomFieldValue("RealTimeFlag", null);  
             	}
end	   	

rule "CDC Alarms Bulk add"                
      when      
          cdcAlarm : CDCAlarm( operation == "add")  
                alarms : ArrayList( size >= 0 )     
		from collect( EnrichedPreprocessAlarm( ((getCdcSubscriptionType() == "L2-7450-IPAG") &&       
					(originatingManagedEntity matches "PPORT .*"||
					originatingManagedEntity matches "CARD .*" ||         
					originatingManagedEntity matches "SLOT .*")) ||     
					 ((getCdcSubscriptionType() == "VLXP") &&            
					(originatingManagedEntity matches "EVC .*") && (tunable == "50002/100/52"))))                        
then    
               // then you process the alarms like below or loop over the list
               for(Alarm alarm : (ArrayList<Alarm>)alarms) {  
                      EnrichedPreprocessAlarm enrichedPreprocessAlarm  = (EnrichedPreprocessAlarm)alarm;         
                      enrichedPreprocessAlarm.setCustomFieldValue("cdc-subscription-type", enrichedPreprocessAlarm.getCdcSubscriptionType()); 
                     enrichedPreprocessAlarm.setCustomFieldValue("RealTimeFlag", "I");  
					service_util.sendCdcAlarm(theScenario, enrichedPreprocessAlarm);  
                     //TODO: send alarms to mobility CDC  
              }      
end		           
 
    
 
