package com.att.gfp.ciena.enrichment;

#list any import classes here.
import com.att.gfp.data.ipagAlarm.EnrichedAlarm;
import com.att.gfp.data.ipagAlarm.AlarmState;
import com.att.gfp.helper.GFPFields;
import com.att.gfp.decomposed.decomposedScenario.DecomposedAlarm;
import com.hp.uca.expert.x733alarm.PerceivedSeverity;
import com.hp.uca.expert.scenario.Scenario;
import com.hp.uca.expert.scenario.ScenarioStatus;
import com.hp.uca.expert.flag.SynchronizationFlag;
import com.hp.uca.expert.flag.*;
import com.hp.uca.common.trace.LogHelper;
import com.att.gfp.data.ipagAlarm.AlarmDelegationType;
import com.att.gfp.decomposed.decomposedScenario.Util;
import com.att.gfp.decomposed.decomposedScenario.PurgeOldAlarms;


#declare any global variables here
global Scenario theScenario;

declare Alarm 
	@role( event ) 
end

rule "send alarms to AM " 
salience 800
no-loop
when
	$a : DecomposedAlarm (alarmState == AlarmState.pending)
then 
	PurgeOldAlarms.startPurgePeriod(theScenario, $a);
	theScenario.getLogger().info("R: Send active alarm to AM = " + $a.getIdentifier());
	Util.sendAlarm($a);
  	$a.setAlarmState(AlarmState.sent);
	theScenario.getSession().update($a);
end
